service: market-watch

_sqs_arn_prefix: &_sqs_arn_prefix
  Fn::Join:
    - ':'
    - - arn
      - aws
      - sqs
      - ${env:MARKET_WATCH_AWS_REGION_NAME}
      - Ref: AWS::AccountId
_sqs_arn_all: &_sqs_arn_all
  Fn::Join:
    - ':'
    - - *_sqs_arn_prefix
      - '*'

_lambda_env: &_lambda_env
  MARKET_WATCH_MONGO_URI: ${env:MARKET_WATCH_MONGO_URI}
  MARKET_WATCH_MONGO_DB_NAME: ${env:MARKET_WATCH_MONGO_DB_NAME}
  MARKET_WATCH_TG_TOKEN: ${env:MARKET_WATCH_TG_TOKEN}
  MARKET_WATCH_WITHIN_LAMBDA: true

resources:
  Resources:
    ProductNotifyQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: 'Market-Watch-Product-Notify'
        VisibilityTimeout: 180
    ProductDistributeQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: 'Market-Watch-Product-Distribute'
        VisibilityTimeout: 180

provider:
  name: aws
  runtime: python3.6
  region: ${env:MARKET_WATCH_AWS_REGION_NAME}
  timeout: 35
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
        - 'sqs:GetQueueUrl'
      Resource:
        - Fn::GetAtt:
            - ProductNotifyQueue
            - Arn
        - Fn::GetAtt:
            - ProductDistributeQueue
            - Arn
    - Effect: 'Allow'
      Action:
        - 'sqs:ListQueues'
      Resource: *_sqs_arn_all

package:
  individually: false
  include:
    - market_watch/**
    - config/**
  exclude:
    - market_watch/test

functions:
  market-watch-crawler:
    handler: market_watch.lambda_handlers.crawl_products_handler
    environment: *_lambda_env
    events:
      - sqs:
          batchSize: 6
          arn:
            Fn::GetAtt:
              - ProductDistributeQueue
              - Arn
  market-watch-telegram-bot:
    handler: market_watch.lambda_handlers.telegram_message_handler
    environment: *_lambda_env
    events:
      - http: POST /
  market-watch-telegram-set-webhook:
    handler: market_watch.lambda_handlers.telegram_webhook_configuration_handler
    environment: *_lambda_env
    events:
      - http: POST /set-webhook
  product_distributor:
    handler: market_watch.lambda_handlers.distribute_products_handler
    environment: *_lambda_env
    events:
      - schedule: rate(5 minutes)
  product_update_handler:
    handler: market_watch.lambda_handlers.product_update_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ProductNotifyQueue
              - Arn
    environment: *_lambda_env

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
